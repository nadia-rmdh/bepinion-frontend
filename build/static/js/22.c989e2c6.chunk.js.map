{"version":3,"sources":["views/Menu/Professionals/ProfessionalDetail.js"],"names":["colorSkills","Biodata","professional","matchRoute","useState","modalInvite","setModalInvite","projectChoosen","setProjectChoosen","useSWR","refreshInterval","getProject","data","errorProject","error","loading","project","useMemo","filter","p","status","map","label","name","value","id","onErrorImage","useCallback","e","target","src","noImage","onerror","className","xs","md","avatar","replace","alt","width","height","style","objectFit","onError","text","firstName","lastName","role","size","yearOfExperience","color","onClick","about","isOpen","centered","toggle","options","isDisabled","onChange","handleChangeProject","components","DropdownIndicator","IndicatorSeparator","request","post","params","professionalId","idProject","then","res","toast","success","catch","err","finally","Skills","skills","skill","i","key","backgroundColor","ColorSkill","category","whiteSpace","sectors","sector","fontSize","projectDetails","closedProject","activeProject","WorkExprerience","workExperience","work","jobTitle","companyName","right","top","moment","startDate","format","endDate","Education","educations","education","educationDegree","educationField","school","graduationYear","ProjectExperience","projectExperience","projectName","projectRole","clientName","ProfessionalDetail","useRouteMatch","getProfessional","errorProfessional","position","bottom","left","background","display","justifyContent","alignItems"],"mappings":"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","file":"static/js/22.c989e2c6.chunk.js","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react'\nimport { Col, Row, Card, CardBody, Badge, Button, Modal, ModalBody, Spinner } from 'reactstrap'\nimport moment from 'moment'\nimport Select from 'react-select';\nimport noImage from '../../../assets/illustrations/image-error.png'\nimport { useRouteMatch } from 'react-router-dom';\nimport useSWR from 'swr';\nimport { toast } from 'react-toastify';\nimport request from \"../../../utils/request\";\nimport { DefaultImageUser } from '../../../components/DefaultImageUser/DefaultImageUser';\nimport ColorSkill from '../../../components/ColorSkill';\n\nconst colorSkills = [\n    'success',\n    'danger',\n    'warning',\n    'secondary',\n    'info',\n    'primary',\n    'light',\n    'dark'\n]\n\nfunction ProfessionalDetail() {\n    const matchRoute = useRouteMatch();\n    const { data: getProfessional, error: errorProfessional, } = useSWR(() => `v1/professional/${matchRoute.params.professionalId}`);\n    const loading = !getProfessional || errorProfessional;\n    const professional = useMemo(() => {\n        return getProfessional?.data?.data ?? [];\n    }, [getProfessional]);\n\n    if (loading) {\n        return (\n            <div\n                style={{\n                    position: \"absolute\",\n                    top: 0,\n                    right: 0,\n                    bottom: 0,\n                    left: 0,\n                    background: \"rgba(255,255,255, 0.5)\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                }}\n            >\n                <Spinner style={{ width: 48, height: 48 }} />\n            </div>\n        )\n    }\n\n    return (\n        <Row className=\"mt-md-3 mt-lg-n2\">\n            <Col xs=\"12\">\n                <Row>\n                    <Col xs=\"12\">\n                        <Biodata professional={professional} matchRoute={matchRoute} />\n                    </Col>\n                    <Col xs=\"12\" md=\"6\">\n                        <Skills professional={professional} />\n                        <WorkExprerience professional={professional} />\n                        <Education professional={professional} />\n                    </Col>\n                    <Col xs=\"12\" md=\"6\">\n                        <ProjectExperience professional={professional} />\n                    </Col>\n                </Row>\n            </Col>\n        </Row>\n    )\n}\n\nconst Biodata = ({ professional, matchRoute }) => {\n    const [modalInvite, setModalInvite] = useState(false);\n    const [projectChoosen, setProjectChoosen] = useState(null);\n\n    const { data: getProject, error: errorProject, } = useSWR(() => `v1/project/client`, { refreshInterval: 0 });\n    const loading = !getProject || errorProject;\n    const project = useMemo(() => {\n        return getProject?.data?.data.filter(p => p.status === 'open').map(p => ({ label: p.name, value: p.id })) ?? [];\n    }, [getProject]);\n\n    const onErrorImage = useCallback((e) => {\n        e.target.src = noImage;\n        e.target.onerror = null;\n    }, [])\n\n    const handleInvite = () => {\n        request.post(`v1/professional/${matchRoute.params.professionalId}/invite`, {\n            idProject: projectChoosen.value\n        })\n            .then(res => {\n                toast.success('Invite Successfully')\n            })\n            .catch(err => {\n                toast.error('Invite Failed');\n            })\n            .finally(() => setModalInvite(!modalInvite))\n    }\n\n    const handleChangeProject = (e) => {\n        setProjectChoosen(e ?? '')\n    }\n\n    return (\n        <Card className=\"shadow-sm\">\n            <CardBody>\n                <Row>\n                    <Col xs=\"12\" md=\"6\" className=\"d-flex align-items-center\">\n                        {professional.avatar\n                            ? <img src={professional.avatar.replace('http://127.0.0.1:5000', 'https://bepinion.com')} alt=\"profile\" width={180} height={180} style={{ objectFit: 'cover' }} onError={(e) => onErrorImage(e)} className=\"rounded-circle shadow-sm mb-3\" />\n                            : <DefaultImageUser text={`${professional.firstName} ${professional.lastName}`} role='p' size={180} />\n                        }\n                        <div className=\"ml-3\">\n                            <div className=\"font-2xl font-weight-bold mb-2\">{professional.firstName} {professional.lastName}</div>\n                            <div className=\"mb-2\">{professional.yearOfExperience} year of experience</div>\n                        </div>\n                    </Col>\n                    <Col xs=\"12\" md=\"6\">\n                        <Row>\n                            <Col xs=\"12\">\n                                <Button color=\"primary\" className=\"float-right\" onClick={() => setModalInvite(!modalInvite)}>\n                                    Invite\n                                </Button>\n                            </Col>\n                            <Col xs=\"12\">\n                                <div className=\"font-lg font-weight-bold mb-2\">\n                                    About me\n                                </div>\n                                <div className=\"text-muted\">\n                                    {professional.about ?? 'Hello! Thank you for visiting my profile. I will update this section soon.'}\n                                </div>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n                <Modal isOpen={modalInvite} centered toggle={() => setModalInvite(!modalInvite)}>\n                    <ModalBody className=\"p-5\">\n                        <Row>\n                            <Col xs=\"12\">\n                                <div className=\"mb-2\">\n                                    Choose a project to inviting professional!\n                                </div>\n                            </Col>\n                            <Col xs=\"12\" className=\"mb-3\">\n                                <Select\n                                    options={project}\n                                    isDisabled={loading}\n                                    onChange={(e) => handleChangeProject(e)}\n                                    components={{ DropdownIndicator: () => null, IndicatorSeparator: () => null }}\n                                    value={projectChoosen} />\n                            </Col>\n                            <Col xs=\"12\" className=\"d-flex justify-content-end\">\n                                <Button color=\"secondary\" className=\"mr-2\" onClick={() => setModalInvite(!modalInvite)}>Cancel</Button>\n                                <Button color=\"primary\" className=\"text-capitalize\" onClick={handleInvite}>Invite</Button>\n                            </Col>\n                        </Row>\n                    </ModalBody>\n                </Modal>\n            </CardBody>\n        </Card>\n    )\n}\n\nconst Skills = ({ professional }) => {\n    return (\n        <Card>\n            <CardBody>\n                <Row>\n                    <Col xs=\"12\">\n                        <div className=\"font-lg font-weight-bold mb-2\">\n                            SKILLS AND STATISTICS\n                        </div>\n                    </Col>\n                    <Col xs=\"12\" md=\"6\" className=\"d-flex justify-content-center align-items-center p-3\">\n                        <Card style={{ width: '200px', height: '200px' }}>\n                            <CardBody className=\"d-flex justify-content-center align-items-center\">\n                                <div className=\"text-muted text-center\">\n                                    This feature to be released soon\n                                </div>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    <Col xs=\"12\" md=\"6\">\n                        <div className=\"mb-2\">\n                            <div className=\"text-muted\">Skills</div>\n                            <div>\n                                {professional?.skills?.map((skill, i) => (\n                                    <Badge key={i} style={{ backgroundColor: ColorSkill[skill.category], whiteSpace: 'normal' }} className=\"text-uppercase m-1 font-sm text-light\">{skill.name}</Badge>\n                                ))}\n                            </div>\n                        </div>\n                        <div className=\"mb-2\">\n                            <div className=\"text-muted\">Sectors</div>\n                            <div>\n                                {professional?.sectors?.map((sector, i) => (\n                                    <Badge key={i} color={colorSkills[i]} className=\"text-uppercase m-1 font-sm text-light\" style={{ whiteSpace: 'normal' }}>{sector.name}</Badge>\n                                ))}\n                            </div>\n                        </div>\n                    </Col>\n                    <Col xs=\"12\" md=\"6\" className=\"text-center mt-3\">\n                        <div className=\"d-flex justify-content-center\" style={{ fontSize: '50pt' }}><Badge color=\"secondary\" className=\"d-flex justify-content-center\" style={{ width: 80, height: 80 }}>{professional?.projectDetails?.closedProject}</Badge></div>\n                        <p style={{ whiteSpace: 'nowrap' }}>Project Completed</p>\n                    </Col>\n                    <Col xs=\"12\" md=\"6\" className=\"text-center mt-3\">\n                        <div className=\"d-flex justify-content-center\" style={{ fontSize: '50pt' }}><Badge color=\"secondary\" className=\"d-flex justify-content-center\" style={{ width: 80, height: 80 }}>{professional?.projectDetails?.activeProject}</Badge></div>\n                        <p style={{ whiteSpace: 'nowrap' }}>Active Projects</p>\n                    </Col>\n                </Row>\n            </CardBody>\n        </Card>\n    )\n}\n\nconst WorkExprerience = ({ professional }) => {\n    return (\n        <Card className=\"shadow-sm\">\n            <CardBody>\n                <Row>\n                    <Col xs=\"12\">\n                        <div className=\"font-lg font-weight-bold mb-2\">WORK EXPERIENCE</div>\n                    </Col>\n                    {professional?.workExperience?.map((work, i) => (\n                        <Col xs=\"12\" key={i}>\n                            <Card>\n                                <CardBody>\n                                    <div className=\"position-relative\">\n                                        <div className=\"mb-2\">\n                                            <div className=\"text-muted\">Job</div>\n                                            <div className=\"font-weight-bold\">{work.jobTitle}</div>\n                                        </div>\n                                        <div className=\"mb-2\">\n                                            <div className=\"text-muted\">Company Name</div>\n                                            <div>{work.companyName}</div>\n                                        </div>\n                                        <div className=\"mb-2\">\n                                            <div className=\"text-muted\">Sectors</div>\n                                            <div>{work.sector}</div>\n                                        </div>\n                                        <div className=\"mb-2\">\n                                            <div className=\"text-muted\">Skills</div>\n                                            <div>\n                                                {work?.skills?.map((skill, i) => (\n                                                    <Badge key={i} style={{ backgroundColor: ColorSkill[skill.category] }} className=\"text-uppercase mx-1 font-sm text-light\">{skill.name}</Badge>\n                                                ))}\n                                            </div>\n                                        </div>\n                                        <div className=\"position-absolute\" style={{ right: '0px', top: '0px' }}>{moment(work.startDate).format('MMMM YYYY')} - {moment(work.endDate).format('MMMM YYYY')}</div>\n                                    </div>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    ))}\n                </Row>\n            </CardBody>\n        </Card>\n    )\n}\n\nconst Education = ({ professional }) => {\n    return (\n        <Card className=\"shadow-sm\">\n            <CardBody>\n                <Row>\n                    <Col xs=\"12\">\n                        <div className=\"font-lg font-weight-bold mb-2\">EDUCATION</div>\n                    </Col>\n\n                    {professional?.educations?.map((education, i) => (\n                        <Col xs=\"12\" key={i}>\n                            <Card>\n                                <CardBody>\n                                    <div className=\"position-relative\">\n                                        <div className=\"font-weight-bold\">{education.educationDegree}</div>\n                                        <div>{education.educationField}</div>\n                                        <div>{education.school}</div>\n                                        <div className=\"position-absolute\" style={{ right: '0px', top: '0px' }}>{education.graduationYear}</div>\n                                    </div>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    ))}\n                </Row>\n            </CardBody>\n        </Card>\n    )\n}\n\nconst ProjectExperience = ({ professional }) => {\n    return (\n        <Card className=\"shadow-sm\">\n            <CardBody>\n                <Row>\n                    <Col xs=\"12\">\n                        <div className=\"font-lg font-weight-bold mb-2\">PROJECT EXPERIENCE</div>\n                    </Col>\n                    {professional?.projectExperience?.map((project, i) => (\n                        <Col xs=\"12\" key={i}>\n                            <Card>\n                                <CardBody>\n                                    <div className=\"position-relative\">\n                                        <div className=\"mb-2\">\n                                            <div className=\"text-muted\">Project Name</div>\n                                            <div>{project.projectName}</div>\n                                        </div>\n                                        <div className=\"mb-2\">\n                                            <div className=\"text-muted\">Project Role</div>\n                                            <div>{project.projectRole}</div>\n                                        </div>\n                                        <div className=\"mb-2\">\n                                            <div className=\"text-muted\">Client Name</div>\n                                            <div>{project.clientName}</div>\n                                        </div>\n                                        <div className=\"mb-2\">\n                                            <div className=\"text-muted\">Project Sector</div>\n                                            <div>{project.sector}</div>\n                                        </div>\n                                        <div className=\"mb-2\">\n                                            <div className=\"text-muted\">Skills</div>\n                                            <div>\n                                                {project?.skills?.map((skill, i) => (\n                                                    <Badge key={i} style={{ backgroundColor: ColorSkill[skill.category] }} className=\"text-uppercase mx-1 font-sm text-light\">{skill.name}</Badge>\n                                                ))}\n                                            </div>\n                                        </div>\n                                        <div className=\"position-absolute\" style={{ right: '0px', top: '0px' }}>\n                                            <div>{moment(project.startDate).format('MMMM YYYY')} - {moment(project.endDate).format('MMMM YYYY')}</div>\n                                            <div>Contract Value Range</div>\n                                        </div>\n                                    </div>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    ))}\n                </Row>\n            </CardBody>\n        </Card>\n    )\n}\nexport default ProfessionalDetail"],"sourceRoot":""}