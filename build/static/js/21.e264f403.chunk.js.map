{"version":3,"sources":["views/Menu/Professionals/ProfessionalDetail.js"],"names":["colorSkills","Biodata","professional","matchRoute","useState","modalInvite","setModalInvite","projectChoosen","setProjectChoosen","useSWR","refreshInterval","getProject","data","errorProject","error","loading","project","useMemo","map","p","label","name","value","id","onErrorImage","useCallback","e","target","src","noImage","onerror","className","xs","md","alt","style","objectFit","width","height","onError","firstName","lastName","yearOfExperience","color","onClick","about","isOpen","centered","toggle","options","isDisabled","placeholder","onChange","handleChangeProject","components","DropdownIndicator","IndicatorSeparator","request","post","params","professionalId","idProject","then","res","toast","success","catch","err","finally","Skills","WorkExprerience","workExperience","work","i","key","jobTitle","companyName","sector","skills","skill","right","top","moment","startDate","format","endDate","Education","educations","education","educationDegree","school","educationField","ProjectExperience","projectExperience","projectName","projectRole","ProfessionalDetail","useRouteMatch","getProfessional"],"mappings":"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","file":"static/js/21.e264f403.chunk.js","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react'\nimport { Col, Row, Card, CardBody, Badge, Button, Modal, ModalBody } from 'reactstrap'\nimport moment from 'moment'\nimport Select from 'react-select';\nimport noImage from '../../../assets/illustrations/image-error.png'\nimport { useRouteMatch } from 'react-router-dom';\nimport useSWR from 'swr';\nimport { toast } from 'react-toastify';\nimport request from \"../../../utils/request\";\n\nconst colorSkills = [\n    'success',\n    'danger',\n    'warning',\n    'secondary',\n    'info',\n    'primary',\n    'light',\n    'dark'\n]\n\nfunction ProfessionalDetail() {\n    const matchRoute = useRouteMatch();\n    const { data: getProfessional, error: errorProfessional, } = useSWR(() => `v1/professional/${matchRoute.params.professionalId}`);\n    const loading = !getProfessional || errorProfessional;\n    const professional = useMemo(() => {\n        return getProfessional?.data?.data ?? [];\n    }, [getProfessional]);\n\n    return (\n        <Row className=\"mt-md-3 mt-lg-n2\">\n            <Col xs=\"12\">\n                <Row>\n                    <Col xs=\"12\">\n                        <Biodata professional={professional} matchRoute={matchRoute} />\n                    </Col>\n                    <Col xs=\"12\" md=\"6\">\n                        <Skills professional={professional} />\n                        <WorkExprerience professional={professional} />\n                        <Education professional={professional} />\n                    </Col>\n                    <Col xs=\"12\" md=\"6\">\n                        <ProjectExperience professional={professional} />\n                    </Col>\n                </Row>\n            </Col>\n        </Row>\n    )\n}\n\nconst Biodata = ({ professional, matchRoute }) => {\n    const [modalInvite, setModalInvite] = useState(false);\n    const [projectChoosen, setProjectChoosen] = useState(null);\n\n    const { data: getProject, error: errorProject, } = useSWR(() => `v1/project/client`, { refreshInterval: 0 });\n    const loading = !getProject || errorProject;\n    const project = useMemo(() => {\n        return getProject?.data?.data.map(p => ({ label: p.name, value: p.id })) ?? [];\n    }, [getProject]);\n\n    const onErrorImage = useCallback((e) => {\n        e.target.src = noImage;\n        e.target.onerror = null;\n    }, [])\n\n    const handleInvite = () => {\n        request.post(`v1/professional/${matchRoute.params.professionalId}/invite`, {\n            idProject: projectChoosen.value\n        })\n            .then(res => {\n                toast.success('Invite Successfully')\n            })\n            .catch(err => {\n                toast.error('Invite Failed');\n            })\n            .finally(() => setModalInvite(!modalInvite))\n    }\n\n    const handleChangeProject = (e) => {\n        setProjectChoosen(e ?? '')\n    }\n\n    return (\n        <Card className=\"shadow-sm\">\n            <CardBody>\n                <Row>\n                    <Col xs=\"12\" md=\"6\" className=\"d-flex align-items-center\">\n                        <img src={noImage} className=\"rounded-circle shadow-sm\" alt=\"avatar\" style={{ objectFit: 'cover', width: '200px', height: '200px' }} onError={(e) => onErrorImage(e)} />\n                        <div className=\"ml-3\">\n                            <div className=\"font-2xl font-weight-bold mb-2\">{professional.firstName} {professional.lastName}</div>\n                            <div className=\"mb-2\">{professional.yearOfExperience} year of experience</div>\n                        </div>\n                    </Col>\n                    <Col xs=\"12\" md=\"6\">\n                        <Row>\n                            <Col xs=\"12\">\n                                <Button color=\"primary\" className=\"float-right\" onClick={() => setModalInvite(!modalInvite)}>\n                                    Invite\n                                </Button>\n                            </Col>\n                            <Col xs=\"12\">\n                                <div className=\"font-lg font-weight-bold mb-2\">\n                                    About me\n                                </div>\n                                <div className=\"text-muted\">\n                                    {professional.about ?? 'Nothing about me'}\n                                </div>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n                <Modal isOpen={modalInvite} centered toggle={() => setModalInvite(!modalInvite)}>\n                    <ModalBody className=\"p-5\">\n                        <Row>\n                            <Col xs=\"12\">\n                                <div className=\"mb-2\">\n                                    Choose a project to inviting professional!\n                                </div>\n                            </Col>\n                            <Col xs=\"12\" className=\"mb-3\">\n                                <Select\n                                    options={project}\n                                    isDisabled={loading}\n                                    placeholder=\"Choose a Project...\"\n                                    onChange={(e) => handleChangeProject(e)}\n                                    components={{ DropdownIndicator: () => null, IndicatorSeparator: () => null }}\n                                    value={projectChoosen} />\n                            </Col>\n                            <Col xs=\"12\" className=\"d-flex justify-content-end\">\n                                <Button color=\"secondary\" className=\"mr-2\" onClick={() => setModalInvite(!modalInvite)}>Cancel</Button>\n                                <Button color=\"primary\" className=\"text-capitalize\" onClick={handleInvite}>Invite</Button>\n                            </Col>\n                        </Row>\n                    </ModalBody>\n                </Modal>\n            </CardBody>\n        </Card>\n    )\n}\n\nconst Skills = ({ professional }) => {\n    return (\n        <Card>\n            <CardBody>\n                <Row>\n                    <Col xs=\"12\">\n                        <div className=\"font-lg font-weight-bold mb-2\">\n                            SKILLS AND STATISTICS\n                        </div>\n                    </Col>\n                </Row>\n            </CardBody>\n        </Card>\n    )\n}\n\nconst WorkExprerience = ({ professional }) => {\n    return (\n        <Card className=\"shadow-sm\">\n            <CardBody>\n                <Row>\n                    <Col xs=\"12\">\n                        <div className=\"font-lg font-weight-bold mb-2\">WORK EXPERIENCE</div>\n                    </Col>\n                    {professional?.workExperience?.map((work, i) => (\n                        <Col xs=\"12\" key={i}>\n                            <Card>\n                                <CardBody>\n                                    <div className=\"position-relative\">\n                                        <div className=\"font-weight-bold\">{work.jobTitle}</div>\n                                        <div>{work.companyName}</div>\n                                        <div>{work.sector}</div>\n                                        <div>Skills</div>\n                                        <div>\n                                            {work?.skills?.map((skill, i) => (\n                                                <Badge key={i} color={colorSkills[i]} className=\"text-uppercase mx-1 font-sm text-light\">{skill.name}</Badge>\n                                            ))}\n                                        </div>\n                                        <div className=\"position-absolute\" style={{ right: '0px', top: '0px' }}>{moment(work.startDate).format('MMMM YYYY')} - {moment(work.endDate).format('MMMM YYYY')}</div>\n                                    </div>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    ))}\n                </Row>\n            </CardBody>\n        </Card>\n    )\n}\n\nconst Education = ({ professional }) => {\n    return (\n        <Card className=\"shadow-sm\">\n            <CardBody>\n                <Row>\n                    <Col xs=\"12\">\n                        <div className=\"font-lg font-weight-bold mb-2\">EDUCATION</div>\n                    </Col>\n\n                    {professional?.educations?.map((education, i) => (\n                        <Col xs=\"12\" key={i}>\n                            <Card>\n                                <CardBody>\n                                    <div className=\"position-relative\">\n                                        <div className=\"font-weight-bold\">{education.educationDegree}</div>\n                                        <div>{education.school}</div>\n                                        <div>{education.educationField}</div>\n                                        {/* <div className=\"position-absolute\" style={{ right: '0px', top: '0px' }}>{moment(work.startDate).format('MMMM YYYY')} - {moment(work.endDate).format('MMMM YYYY')}</div> */}\n                                    </div>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    ))}\n                </Row>\n            </CardBody>\n        </Card>\n    )\n}\n\nconst ProjectExperience = ({ professional }) => {\n    return (\n        <Card className=\"shadow-sm\">\n            <CardBody>\n                <Row>\n                    <Col xs=\"12\">\n                        <div className=\"font-lg font-weight-bold mb-2\">PROJECT EXPERIENCE</div>\n                    </Col>\n                    {professional?.projectExperience?.map((project, i) => (\n                        <Col xs=\"12\" key={i}>\n                            <Card>\n                                <CardBody>\n                                    <div className=\"position-relative\">\n                                        <div className=\"font-weight-bold\">{project.projectName}</div>\n                                        <div>{project.projectRole}</div>\n                                        <div>Client Name</div>\n                                        <div>{project.sector}</div>\n                                        <div>Skills</div>\n                                        <div>\n                                            {project?.skills?.map((skill, i) => (\n                                                <Badge key={i} color={colorSkills[i]} className=\"text-uppercase mx-1 font-sm text-light\">{skill.name}</Badge>\n                                            ))}\n                                        </div>\n                                        <div className=\"position-absolute\" style={{ right: '0px', top: '0px' }}>\n                                            <div>{moment(project.startDate).format('MMMM YYYY')} - {moment(project.endDate).format('MMMM YYYY')}</div>\n                                            <div>Contract Value Range</div>\n                                        </div>\n                                    </div>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    ))}\n                </Row>\n            </CardBody>\n        </Card>\n    )\n}\nexport default ProfessionalDetail"],"sourceRoot":""}