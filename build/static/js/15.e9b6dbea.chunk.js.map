{"version":3,"sources":["views/DataDummy/SkillsColorsDummy.js","views/Menu/Projects/ProjectDetail.js"],"names":["data","useState","modalApply","setModalApply","matchRoute","useRouteMatch","useSWR","params","projectId","getProjects","errorProjects","error","mutate","loading","project","useMemo","useFormik","initialValues","cost","validationSchema","Yup","shape","min","label","onSubmit","values","setSubmitting","setErrors","request","post","submittedCost","parseInt","then","res","toast","success","catch","err","finally","touched","errors","setValues","handleSubmit","xs","className","name","projectOwnerName","moment","createdAt","format","closingDate","isApplied","color","disabled","onClick","fromNow","style","whiteSpace","description","meetingDetails","date","sectors","map","s","i","sector","length","duration","minimumContractValue","estimatedContractValue","prerequisite","projectRequirementSkill","key","skillsColours","skill","isOpen","centered","toggle","completeDate","addonType","type","id","value","placeholder","onChange","e","state","target","onWheel","blur"],"mappings":"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","file":"static/js/15.e9b6dbea.chunk.js","sourcesContent":["export default [\n    'success',\n    'danger',\n    'warning',\n    'secondary',\n    'info',\n    'primary',\n    'dark'\n]","import React, { useMemo, useState } from \"react\"\nimport { Card, CardBody, Row, Col, Button, ModalBody, Modal, Badge, Input, InputGroup, InputGroupAddon, InputGroupText } from \"reactstrap\";\nimport { useFormik } from \"formik\";\nimport * as Yup from 'yup';\nimport skillsColours from '../../DataDummy/SkillsColorsDummy'\nimport { useRouteMatch } from \"react-router-dom\";\nimport useSWR from \"swr\";\nimport moment from \"moment\";\nimport request from \"../../../utils/request\";\nimport { toast } from \"react-toastify\";\n\n\nexport default ({ data }) => {\n    const [modalApply, setModalApply] = useState(false);\n    const matchRoute = useRouteMatch();\n    const { data: getProjects, error: errorProjects, mutate } = useSWR(() => `v1/project/${matchRoute.params.projectId}`);\n    const loading = !getProjects || errorProjects;\n    const project = useMemo(() => {\n        return getProjects?.data?.data ?? [];\n    }, [getProjects]);\n\n    const ValidationFormSchema = () => {\n        return Yup.object().shape({\n            cost: Yup.number().min(1, 'Min value 1.').label('Duration'),\n        })\n    }\n\n    const { values, touched, errors, setValues, handleSubmit } = useFormik({\n        initialValues: {\n            cost: 0,\n        },\n        validationSchema: ValidationFormSchema,\n        onSubmit: (values, { setSubmitting, setErrors }) => {\n            setSubmitting(true)\n\n            request.post(`v1/project/${matchRoute.params.projectId}/apply`, {\n                submittedCost: parseInt(values.cost),\n            })\n                .then(res => {\n                    toast.success('Project successfully applied.');\n                    mutate()\n                })\n                .catch(err => {\n                    toast.error('Apply project failed.');\n                })\n                .finally(() => {\n                    setModalApply(!modalApply)\n                    setSubmitting(false)\n                })\n        }\n    })\n\n    if (loading) {\n        return (\n            <div>loading</div>\n        )\n    }\n    return (\n        <Card>\n            <CardBody>\n                <Row>\n                    <Col xs=\"12\" className=\"d-flex justify-content-between mb-3\">\n                        <div>\n                            <div className=\"font-lg font-weight-bold\">{project.name}</div>\n                            <div className=\"text-muted\">{project.projectOwnerName}</div>\n                            <div><span className=\"text-muted\">Posted</span> {moment(project.createdAt).format('DD MMMM YYYY')}</div>\n                            <div><span className=\"text-muted\">Closing On</span> {moment(project.closingDate).format('DD MMMM YYYY')}</div>\n                        </div>\n                        <div>\n                            <div className=\"float-right\">\n                                {project.isApplied ?\n                                    <Button color=\"primary\" disabled>\n                                        Applied\n                                    </Button>\n                                    :\n                                    <Button color=\"primary\" onClick={() => setModalApply(!modalApply)}>\n                                        Apply\n                                    </Button>\n                                }\n                            </div>\n                            <br />\n                            <div className=\"mt-5 font-sm font-weight-bold text-danger\">Closing in {moment(project.closingDate).fromNow(true)}</div>\n                        </div>\n                    </Col>\n                    <Col xs=\"12\">\n                        <Row>\n                            <Col xs=\"9\">\n                                <div className=\"font-lg font-weight-bold mb-2\">\n                                    Project Details\n                                </div>\n                                <Row>\n                                    <Col xs=\"6\">\n                                        <div className=\"text-muted\">\n                                            Description\n                                        </div>\n                                        <div style={{ whiteSpace: 'pre-line' }}>\n                                            {project.description ?? ''}\n                                        </div>\n                                    </Col>\n                                    <Col xs=\"6\">\n                                        <div className=\"mb-2\">\n                                            <div className=\"text-muted\">Meeting Date</div>\n                                            <div>{moment(project.meetingDetails.date).format('DD MMMM YYYY')}</div>\n                                        </div>\n                                        <div className=\"mb-2\">\n                                            <div className=\"text-muted\">Sector</div>\n                                            <div>{project.sectors.map((s, i) => `${s.sector.name}${project.sectors.length === i + 1 ? '' : ','} `)}</div>\n                                        </div>\n                                        <div className=\"mb-2\">\n                                            <div className=\"text-muted\">Duration</div>\n                                            <div>{project.duration} Hours</div>\n                                        </div>\n                                        <div className=\"mb-2\">\n                                            <div className=\"text-muted\">Minimum Contract Value</div>\n                                            <div>IDR {project.minimumContractValue}</div>\n                                        </div>\n                                        <div className=\"mb-2\">\n                                            <div className=\"text-muted\">Estimated Contract Value</div>\n                                            <div>IDR {project.estimatedContractValue}</div>\n                                        </div>\n                                        <div className=\"mb-2\">\n                                            <div className=\"text-muted\">\n                                                Supporting Materials\n                                            </div>\n                                            <div style={{ whiteSpace: 'pre-line' }}>\n                                                {project.prerequisite ?? '-'}\n                                            </div>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </Col>\n                            <Col xs=\"3\">\n                                <div className=\"font-lg font-weight-bold mb-2\">\n                                    Requirements\n                                </div>\n                                <div className=\"mb-2\">\n                                    <div className=\"text-muted\">Skills</div>\n                                    {project.projectRequirementSkill.map((s, i) => (\n                                        <Badge key={i} color={skillsColours[i]} className=\"w-100 text-uppercase font-sm my-1 text-light\">{s.skill.name}</Badge>\n                                    ))}\n                                </div>\n                                <div className=\"mb-2\">\n                                    <div className=\"text-muted\">Minimum years of experience</div>\n                                    <div>5 years</div>\n                                </div>\n                                <div className=\"mb-2\">\n                                    <div>Bachelor Degree in Mechanical Engineering</div>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n                <Modal isOpen={modalApply} centered toggle={() => setModalApply(!modalApply)}>\n                    <ModalBody className=\"p-5\">\n                        <Row>\n                            <Col xs=\"12\" className=\"mb-5\">\n                                <div className=\"mb-2\">\n                                    <div className=\"text-muted\">Project name</div>\n                                    <div>{project.name}</div>\n                                </div>\n                                <div className=\"mb-2\">\n                                    <div className=\"text-muted\">Duration</div>\n                                    <div>{project.duration} Hours</div>\n                                </div>\n                                <div className=\"mb-2\">\n                                    <div className=\"text-muted\">Completion date</div>\n                                    <div>{moment(project.completeDate).format('DD MMMM YYYY')}</div>\n                                </div>\n                                <div className=\"mb-2\">\n                                    <div className=\"text-muted\">Proposed service fee</div>\n                                    <InputGroup>\n                                        <InputGroupAddon addonType=\"prepend\">\n                                            <InputGroupText>\n                                                IDR\n                                            </InputGroupText>\n                                        </InputGroupAddon>\n                                        <Input type=\"number\" name=\"cost\" id=\"cost\" value={values.cost} placeholder=\"1000000\" onChange={(e) => setValues(state => ({ ...state, cost: e.target.value }))}\n                                            onWheel={(e) => { e.target.blur() }}\n                                        />\n                                    </InputGroup>\n                                    <small className=\"text-muted\">\n                                        *Minimum proposed service fee should be Rp XXX.\n                                    </small>\n                                    {touched.cost && errors.cost && <small className=\"text-danger\">{errors.cost}</small>}\n                                </div>\n                            </Col>\n                            <Col xs=\"12\" className=\"mb-3\">\n                                <small className=\"text-muted\">\n                                    *Platform fee 5% and WHT would be deducted from project value\n                                </small>\n                            </Col>\n                            <Col xs=\"12\" className=\"d-flex justify-content-end\">\n                                <Button color=\"secondary\" className=\"mr-2\" onClick={() => setModalApply(!modalApply)}>Cancel</Button>\n                                <Button color=\"primary\" onClick={handleSubmit}>Apply</Button>\n                            </Col>\n                        </Row>\n                    </ModalBody>\n                </Modal>\n            </CardBody>\n        </Card>\n    );\n}\n"],"sourceRoot":""}