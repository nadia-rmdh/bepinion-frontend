{"version":3,"sources":["utils/formatter.js","views/Menu/Projects/ProjectDetail.js"],"names":["convertToRupiah","angka","rupiah","angkarev","toString","split","reverse","join","i","length","substr","convertNumberCurrencies","n","ranges","divider","suffix","numeral","register","delimiters","thousands","decimal","abbreviations","thousand","million","billion","trillion","ordinal","number","currency","symbol","locale","data","history","useHistory","useState","modalApply","setModalApply","matchRoute","useRouteMatch","useSWR","params","projectId","getProjects","errorProjects","error","mutate","loading","project","useMemo","status","push","style","position","top","right","bottom","left","background","display","justifyContent","alignItems","width","height","xs","className","name","projectOwnerName","moment","createdAt","format","closingDate","isApplied","color","disabled","onClick","fromNow","lg","md","whiteSpace","description","prerequisite","meetingDetails","date","sectors","map","s","sector","duration","Number","isInteger","minimumContractValue","estimatedContractValue","projectRequirementSkill","key","backgroundColor","ColorSkill","skill","category","minYearExp","ModalApplication","authUser","useAuthUser","modalConfirmation","setModalConfirmation","useFormik","initialValues","cost","validationSchema","Yup","shape","min","smcv","label","onSubmit","values","setSubmitting","setErrors","request","post","submittedCost","parseInt","then","res","toast","success","catch","err","finally","touched","errors","setValues","handleSubmit","isOpen","centered","toggle","completeDate","addonType","placeholder","decimalsLimit","groupSeparator","decimalSeparator","value","onValueChange","state"],"mappings":"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","file":"static/js/16.fabe2174.chunk.js","sourcesContent":["import numeral from 'numeral'\n\nnumeral.register('locale', 'indonesia', {\n    delimiters: {\n        thousands: '.',\n        decimal: ','\n    },\n    abbreviations: {\n        thousand: 'rb',\n        million: 'jt',\n        billion: 'M',\n        trillion: 'T'\n    },\n    ordinal: function (number) {\n        return number === 1 ? 'er' : 'Ã¨me';\n    },\n    currency: {\n        symbol: 'IDR'\n    }\n});\nnumeral.locale('indonesia')\n\nexport function convertToRupiah(angka) {\n    var rupiah = '';\n    var angkarev = angka?.toString().split('').reverse().join('');\n    for (var i = 0; i < angkarev.length; i++) if (i % 3 === 0) rupiah += angkarev.substr(i, 3) + '.';\n\n    return rupiah.split('', rupiah.length - 1).reverse().join('');\n}\n\nexport function convertNumberCurrencies(n) {\n    const ranges = [\n        { divider: 1e18, suffix: 'E' },\n        { divider: 1e15, suffix: 'P' },\n        { divider: 1e12, suffix: 'T' },\n        { divider: 1e9, suffix: 'G' },\n        { divider: 1e6, suffix: 'M' },\n        { divider: 1e3, suffix: 'k' }\n    ];\n\n    for (var i = 0; i < ranges.length; i++) {\n        if (n >= ranges[i].divider) {\n            return (n / ranges[i].divider).toString() + ranges[i].suffix;\n        }\n    }\n    return n.toString();\n}\n\nexport function formatDate(date) {\n    let d = new Date(date),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n\n    if (d.toString() === 'Invalid Date') {\n        return null;\n    }\n\n    if (month.length < 2)\n        month = '0' + month;\n    if (day.length < 2)\n        day = '0' + day;\n\n    return [year, month, day].join('-');\n}\n\nexport function dataURIToBlob(dataURI) {\n    const splitDataURI = dataURI.split(',')\n    const byteString = splitDataURI[0].indexOf('base64') >= 0 ? atob(splitDataURI[1]) : decodeURI(splitDataURI[1])\n    const mimeString = splitDataURI[0].split(':')[1].split(';')[0]\n\n    const ia = new Uint8Array(byteString.length)\n    for (let i = 0; i < byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i)\n    }\n    return new Blob([ia], { type: mimeString })\n}\n\nexport function matchWildcard(str, wildcard) {\n    var escapeRegex = (str) => str.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, \"\\\\$1\");\n    return new RegExp(\"^\" + wildcard.split(\"*\").map(escapeRegex).join(\".*\") + \"$\").test(str);\n}\n\nexport function convertNumber(numb, format = '0.0a') {\n    return numeral(numb).format(format)\n}\n","import React, { useMemo, useState } from \"react\"\nimport { Card, CardBody, Row, Col, Button, ModalBody, Modal, Badge, InputGroup, InputGroupAddon, InputGroupText, Spinner } from \"reactstrap\";\nimport { useFormik } from \"formik\";\nimport * as Yup from 'yup';\nimport { useRouteMatch } from \"react-router-dom\";\nimport useSWR from \"swr\";\nimport moment from \"moment\";\nimport request from \"../../../utils/request\";\nimport { toast } from \"react-toastify\";\nimport CurrencyInput from \"react-currency-input-field\";\nimport { useAuthUser } from \"../../../store\";\nimport { convertToRupiah } from \"../../../utils/formatter\";\nimport { useHistory } from \"react-router\";\nimport ColorSkill from \"../../../components/ColorSkill\";\n\n\nexport default ({ data }) => {\n    const history = useHistory();\n    const [modalApply, setModalApply] = useState(false);\n    const matchRoute = useRouteMatch();\n    const { data: getProjects, error: errorProjects, mutate } = useSWR(() => `v1/project/${matchRoute.params.projectId}`);\n    const loading = !getProjects || errorProjects;\n    const project = useMemo(() => {\n        return getProjects?.data?.data ?? [];\n    }, [getProjects]);\n\n    if (loading) {\n        if (project.status && project.status !== 'open') history.push('/')\n        return (\n            <div\n                style={{\n                    position: \"absolute\",\n                    top: 0,\n                    right: 0,\n                    bottom: 0,\n                    left: 0,\n                    background: \"rgba(255,255,255, 0.5)\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                }}\n            >\n                <Spinner style={{ width: 48, height: 48 }} />\n            </div>\n        )\n    }\n    return (\n        <Card>\n            <CardBody>\n                <Row>\n                    <Col xs=\"12\" className=\"d-flex justify-content-between mb-3\">\n                        <div>\n                            <div className=\"font-lg font-weight-bold\">{project.name}</div>\n                            <div className=\"text-muted\">{project.projectOwnerName}</div>\n                            <div><span className=\"text-muted\">Posted</span> {moment(project.createdAt).format('DD MMMM YYYY')}</div>\n                            <div><span className=\"text-muted\">Closing On</span> {moment(project.closingDate).format('DD MMMM YYYY')}</div>\n                        </div>\n                        <div>\n                            <div className=\"float-right\">\n                                {project.isApplied ?\n                                    <Button color=\"primary\" disabled>\n                                        Applied\n                                    </Button>\n                                    :\n                                    <Button color=\"primary\" disabled={project.status !== 'open'} onClick={() => setModalApply(!modalApply)}>\n                                        Apply\n                                    </Button>\n                                }\n                            </div>\n                            <br />\n                            {project.status === 'open'\n                                ? <div className=\"mt-5 font-sm font-weight-bold text-danger\">Closing in {moment(project.closingDate).fromNow(true)}</div>\n                                : <div className=\"mt-5 font-sm font-weight-bold text-danger\">Closed</div>\n                            }\n                        </div>\n                    </Col>\n                    <Col xs=\"12\">\n                        <Row>\n                            <Col xs=\"12\" lg=\"9\">\n                                <div className=\"font-lg font-weight-bold mb-2\">\n                                    Project Details\n                                </div>\n                                <Row>\n                                    <Col xs=\"12\" md=\"6\">\n                                        <div className=\"mb-2\">\n                                            <div className=\"text-muted\">\n                                                Description\n                                            </div>\n                                            <div style={{ whiteSpace: 'pre-line' }}>\n                                                {project.description ?? ''}\n                                            </div>\n                                        </div>\n                                        <div className=\"mb-2\">\n                                            <div className=\"text-muted\">\n                                                Supporting Materials\n                                            </div>\n                                            <div style={{ whiteSpace: 'pre-line' }}>\n                                                {project.prerequisite ?? '-'}\n                                            </div>\n                                        </div>\n                                    </Col>\n                                    <Col xs=\"12\" md=\"6\">\n                                        <div className=\"mb-2\">\n                                            <div className=\"text-muted\">Meeting Date</div>\n                                            <div>{moment(project.meetingDetails.date).format('DD MMMM YYYY')}</div>\n                                        </div>\n                                        <div className=\"mb-2\">\n                                            <div className=\"text-muted\">Sector</div>\n                                            <div>{project.sectors.map((s, i) => `${s.sector.name}${project.sectors.length === i + 1 ? '' : ','} `)}</div>\n                                        </div>\n                                        <div className=\"mb-2\">\n                                            <div className=\"text-muted\">Meeting Duration</div>\n                                            <div>{project.duration} Hours</div>\n                                        </div>\n                                        <div className=\"mb-2\">\n                                            <div className=\"text-muted\">Minimum Contract Value</div>\n                                            <div>{!Number.isInteger(project?.minimumContractValue) ? project?.minimumContractValue : `IDR ${convertToRupiah(project?.minimumContractValue ?? 0)}`}</div>\n                                        </div>\n                                        <div className=\"mb-2\">\n                                            <div className=\"text-muted\">Estimated Contract Value</div>\n                                            <div>{!Number.isInteger(project?.estimatedContractValue) ? project?.estimatedContractValue : `IDR ${convertToRupiah(project?.estimatedContractValue ?? 0)}`}</div>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </Col>\n                            <Col xs=\"12\" lg=\"3\">\n                                <div className=\"font-lg font-weight-bold mb-2\">\n                                    Requirements\n                                </div>\n                                <div className=\"mb-2\">\n                                    <div className=\"text-muted\">Skills</div>\n                                    {project.projectRequirementSkill.map((s, i) => (\n                                        <Badge key={i} style={{ backgroundColor: ColorSkill[s.skill.category] }} className=\"w-100 text-uppercase font-sm my-1 text-light\">{s.skill.name}</Badge>\n                                    ))}\n                                </div>\n                                <div className=\"mb-2\">\n                                    <div className=\"text-muted\">Minimum years of experience</div>\n                                    <div>{project?.minYearExp} years</div>\n                                </div>\n                                <div className=\"mb-2\">\n                                    <div>Bachelor Degree in Mechanical Engineering</div>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n                <ModalApplication modalApply={modalApply} setModalApply={setModalApply} project={project} mutate={mutate} matchRoute={matchRoute} />\n            </CardBody>\n        </Card>\n    );\n}\n\nconst ModalApplication = ({ modalApply, setModalApply, project, mutate, matchRoute }) => {\n    const authUser = useAuthUser();\n    const [modalConfirmation, setModalConfirmation] = useState(false);\n\n    const ValidationFormSchema = () => {\n        return Yup.object().shape({\n            cost: Yup.number().min(authUser?.smcv, 'Min value ' + authUser?.smcv).label('Duration'),\n        })\n    }\n\n    const { values, touched, errors, setValues, handleSubmit } = useFormik({\n        initialValues: {\n            cost: 0,\n        },\n        validationSchema: ValidationFormSchema,\n        onSubmit: (values, { setSubmitting, setErrors }) => {\n            setSubmitting(true)\n\n            request.post(`v1/project/${matchRoute.params.projectId}/apply`, {\n                submittedCost: parseInt(values.cost),\n            })\n                .then(res => {\n                    toast.success('Project successfully applied.');\n                    mutate()\n                    setModalConfirmation(!modalConfirmation)\n                    setModalApply(!modalApply)\n                })\n                .catch(err => {\n                    toast.error('Apply project failed.');\n                    setModalConfirmation(!modalConfirmation)\n                })\n                .finally(() => {\n                    setSubmitting(false)\n                })\n        }\n    })\n\n    return (\n        <>\n            <Modal isOpen={modalApply} centered toggle={() => setModalApply(!modalApply)}>\n                <ModalBody className=\"p-5\">\n                    <Row>\n                        <Col xs=\"12\" className=\"mb-5\">\n                            <div className=\"mb-2\">\n                                <div className=\"text-muted\">Project name</div>\n                                <div>{project.name}</div>\n                            </div>\n                            <div className=\"mb-2\">\n                                <div className=\"text-muted\">Duration</div>\n                                <div>{project.duration} Hours</div>\n                            </div>\n                            <div className=\"mb-2\">\n                                <div className=\"text-muted\">Completion date</div>\n                                <div>{moment(project.completeDate).format('DD MMMM YYYY')}</div>\n                            </div>\n                            <div className=\"mb-2\">\n                                <div className=\"text-muted\">Proposed service fee</div>\n                                <InputGroup>\n                                    <InputGroupAddon addonType=\"prepend\">\n                                        <InputGroupText>\n                                            IDR\n                                        </InputGroupText>\n                                    </InputGroupAddon>\n                                    <CurrencyInput\n                                        placeholder=\"Min. value 500.000\"\n                                        decimalsLimit={2}\n                                        groupSeparator=\".\"\n                                        decimalSeparator=\",\"\n                                        value={values.cost}\n                                        onValueChange={(value) => setValues(state => ({ ...state, cost: value }))}\n                                        className={`form-control ${touched.cost && errors.cost && 'border border-danger'}`}\n                                    />\n                                </InputGroup>\n                                <small className=\"text-muted\">\n                                    *Minimum proposed service fee should be Rp {convertToRupiah(authUser?.smcv ?? 0)}\n                                </small>\n                            </div>\n                        </Col>\n                        <Col xs=\"12\" className=\"mb-3\">\n                            <small className=\"text-muted\">\n                                *Platform fee 5% and WHT would be deducted from project value\n                            </small>\n                        </Col>\n                        <Col xs=\"12\" className=\"d-flex justify-content-end\">\n                            <Button color=\"secondary\" className=\"mr-2\" onClick={() => setModalApply(!modalApply)}>Cancel</Button>\n                            <Button color=\"primary\" disabled={values.cost < authUser?.smcv} onClick={() => setModalConfirmation(!modalConfirmation)}>Apply</Button>\n                        </Col>\n                    </Row>\n                </ModalBody>\n            </Modal>\n\n            <Modal isOpen={modalConfirmation} centered toggle={() => setModalConfirmation(!modalConfirmation)}>\n                <ModalBody className=\"p-5\">\n                    <Row>\n                        <Col xs=\"12\" className=\"mb-4\">\n                            <div className=\"font-weight-bold\">\n                                By clicking submit, you confirm that all the information provided is true and correct.\n                            </div>\n                        </Col>\n                        <Col xs=\"12\" className=\"d-flex justify-content-end\">\n                            <Button color=\"secondary\" className=\"mr-2\" onClick={() => setModalConfirmation(!modalConfirmation)}>No</Button>\n                            <Button color=\"primary\" onClick={handleSubmit}>Yes</Button>\n                        </Col>\n                    </Row>\n                </ModalBody>\n            </Modal>\n        </>\n    )\n}\n"],"sourceRoot":""}