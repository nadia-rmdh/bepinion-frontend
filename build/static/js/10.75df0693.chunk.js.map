{"version":3,"sources":["views/DataDummy/SkillsDummy.js","views/DataDummy/SkillsColorsDummy.js","views/Menu/Projects/ProjectDetail.js"],"names":["label","value","data","useState","modalApply","setModalApply","matchRoute","useRouteMatch","useSWR","params","projectId","getProjects","errorProjects","error","loading","mutate","project","useMemo","useFormik","initialValues","cost","validationSchema","Yup","shape","min","onSubmit","values","setSubmitting","setErrors","request","post","submittedCost","parseInt","then","res","toast","success","catch","err","finally","touched","errors","setValues","handleSubmit","xs","className","name","projectOwnerName","moment","createdAt","format","closingDate","isApplied","color","onClick","fromNow","description","completeDate","sector","duration","budget","projectRequirementSkill","map","s","i","key","skillsColours","isOpen","centered","toggle","addonType","type","id","placeholder","onChange","e","state","target"],"mappings":"yGAAe,KACX,CAAEA,MAAO,MAAOC,MAAO,KACvB,CAAED,MAAO,SAAUC,MAAO,KAC1B,CAAED,MAAO,aAAcC,MAAO,KAC9B,CAAED,MAAO,UAAWC,MAAO,KAC3B,CAAED,MAAO,SAAUC,MAAO,KAC1B,CAAED,MAAO,UAAWC,MAAO,KAC3B,CAAED,MAAO,WAAYC,MAAO,KAC5B,CAAED,MAAO,UAAWC,MAAO,KAC3B,CAAED,MAAO,eAAgBC,MAAO,O,iCCTrB,KACX,UACA,SACA,UACA,YACA,OACA,UACA,QACA,S,0QCKW,sBAAc,EAAXC,KAAY,IAAD,EACWC,oBAAS,GADpB,mBAClBC,EADkB,KACNC,EADM,KAEnBC,EAAaC,cAFM,EAGmDC,aAAO,sCAAoBF,EAAWG,OAAOC,cAA3GC,EAHW,EAGjBT,KAA0BU,EAHT,EAGEC,MACrBC,GAJmB,EAGwBC,QAChCJ,IAAgBC,GAC3BI,EAAUC,mBAAQ,WAAO,IAAD,IAC1B,wBAAON,QAAP,IAAOA,GAAP,UAAOA,EAAaT,YAApB,aAAO,EAAmBA,YAA1B,QAAkC,KACnC,CAACS,IAPqB,EAeoCO,YAAU,CACnEC,cAAe,CACXC,KAAM,GAEVC,iBAVyB,WACzB,OAAOC,MAAaC,MAAM,CACtBH,KAAME,MAAaE,IAAI,EAAG,gBAAgBxB,MAAM,eASpDyB,SAAU,SAACC,EAAD,GAA2C,IAAhCC,EAA+B,EAA/BA,cAA+B,EAAhBC,UAChCD,GAAc,GAEdE,IAAQC,KAAR,qBAA2BxB,EAAWG,OAAOC,UAA7C,UAAgE,CAC5DqB,cAAeC,SAASN,EAAON,QAE9Ba,MAAK,SAAAC,GACFC,IAAMC,QAAQ,oCAEjBC,OAAM,SAAAC,GACHH,IAAMtB,MAAM,4BAEf0B,SAAQ,WACLlC,GAAeD,GACfuB,GAAc,SAnBtBD,EAfiB,EAejBA,OAAQc,EAfS,EAeTA,QAASC,EAfA,EAeAA,OAAQC,EAfR,EAeQA,UAAWC,EAfnB,EAemBA,aAwB5C,OAAI7B,EAEI,wCAIJ,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAK8B,GAAG,KAAKC,UAAU,uCACnB,6BACI,yBAAKA,UAAU,4BAA4B7B,EAAQ8B,MACnD,yBAAKD,UAAU,cAAc7B,EAAQ+B,kBACrC,6BAAK,0BAAMF,UAAU,cAAhB,UAAL,IAAiDG,IAAOhC,EAAQiC,WAAWC,OAAO,iBAClF,6BAAK,0BAAML,UAAU,cAAhB,cAAL,IAAqDG,IAAOhC,EAAQmC,aAAaD,OAAO,kBAE5F,6BACI,yBAAKL,UAAU,eACV7B,EAAQoC,UACL,yBAAKP,UAAU,yCAAf,WAEA,kBAAC,IAAD,CAAQQ,MAAM,UAAUC,QAAS,kBAAMjD,GAAeD,KAAtD,UAKR,6BACA,yBAAKyC,UAAU,6CAAf,cAAuEG,IAAOhC,EAAQmC,aAAaI,SAAQ,MAGnH,kBAAC,IAAD,CAAKX,GAAG,KACJ,yBAAKC,UAAU,4BAAf,eAGA,6BACK7B,EAAQwC,cAGjB,kBAAC,IAAD,CAAKZ,GAAG,KACJ,yBAAKC,UAAU,4BAAf,gBAGA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKD,GAAG,KACJ,yBAAKC,UAAU,QACX,yBAAKA,UAAU,cAAf,mBACA,6BAAMG,IAAOhC,EAAQyC,cAAcP,OAAO,kBAE9C,yBAAKL,UAAU,QACX,yBAAKA,UAAU,cAAf,UACA,6BAAM7B,EAAQ0C,SAElB,yBAAKb,UAAU,QACX,yBAAKA,UAAU,cAAf,YACA,6BAAM7B,EAAQ2C,SAAd,WAEJ,yBAAKd,UAAU,QACX,yBAAKA,UAAU,cAAf,UACA,oCAAU7B,EAAQ4C,UAG1B,kBAAC,IAAD,CAAKhB,GAAG,KACJ,yBAAKC,UAAU,QACX,yBAAKA,UAAU,cAAf,UACC7B,EAAQ6C,wBAAwBC,KAAI,SAACC,EAAGC,GAAJ,OACjC,kBAAC,IAAD,CAAOC,IAAKD,EAAGX,MAAOa,IAAcF,GAAInB,UAAU,gDAAgDkB,EAAEjB,UAG5G,yBAAKD,UAAU,QACX,yBAAKA,UAAU,cAAf,+BACA,yCAEJ,yBAAKA,UAAU,QACX,+EAMpB,kBAAC,IAAD,CAAOsB,OAAQ/D,EAAYgE,UAAQ,EAACC,OAAQ,kBAAMhE,GAAeD,KAC7D,kBAAC,IAAD,CAAWyC,UAAU,OACjB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKD,GAAG,KAAKC,UAAU,QACnB,yBAAKA,UAAU,QACX,yBAAKA,UAAU,cAAf,UACA,6BAAM7B,EAAQ0C,SAElB,yBAAKb,UAAU,QACX,yBAAKA,UAAU,cAAf,YACA,6BAAM7B,EAAQ2C,SAAd,WAEJ,yBAAKd,UAAU,QACX,yBAAKA,UAAU,cAAf,mBACA,6BAAMG,IAAOhC,EAAQyC,cAAcP,OAAO,kBAE9C,yBAAKL,UAAU,QACX,yBAAKA,UAAU,cAAf,iBACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAiByB,UAAU,WACvB,kBAAC,IAAD,aAIJ,kBAAC,IAAD,CAAOC,KAAK,SAASzB,KAAK,OAAO0B,GAAG,OAAOvE,MAAOyB,EAAON,KAAMqD,YAAY,UAAUC,SAAU,SAACC,GAAD,OAAOjC,GAAU,SAAAkC,GAAK,kCAAUA,GAAV,IAAiBxD,KAAMuD,EAAEE,OAAO5E,eAExJuC,EAAQpB,MAAQqB,EAAOrB,MAAQ,2BAAOyB,UAAU,eAAeJ,EAAOrB,QAG/E,kBAAC,IAAD,CAAKwB,GAAG,KAAKC,UAAU,8BACnB,kBAAC,IAAD,CAAQQ,MAAM,YAAYR,UAAU,OAAOS,QAAS,kBAAMjD,GAAeD,KAAzE,UACA,kBAAC,IAAD,CAAQiD,MAAM,UAAUC,QAASX,GAAjC","file":"static/js/10.75df0693.chunk.js","sourcesContent":["export default [\n    { label: 'PHP', value: '1' },\n    { label: 'Phyton', value: '2' },\n    { label: 'Javascript', value: '3' },\n    { label: 'Flutter', value: '4' },\n    { label: 'Golang', value: '5' },\n    { label: 'Laravel', value: '6' },\n    { label: 'React JS', value: '7' },\n    { label: 'Node JS', value: '8' },\n    { label: 'React Native', value: '9' },\n]","export default [\n    'success',\n    'danger',\n    'warning',\n    'secondary',\n    'info',\n    'primary',\n    'light',\n    'dark'\n]","import React, { useMemo, useState } from \"react\"\nimport { Card, CardBody, Row, Col, Button, ModalBody, Modal, Badge, Input, InputGroup, InputGroupAddon, InputGroupText } from \"reactstrap\";\nimport { useFormik } from \"formik\";\nimport * as Yup from 'yup';\nimport skills from '../../DataDummy/SkillsDummy'\nimport skillsColours from '../../DataDummy/SkillsColorsDummy'\nimport { useRouteMatch } from \"react-router-dom\";\nimport useSWR from \"swr\";\nimport moment from \"moment\";\nimport request from \"../../../utils/request\";\nimport { toast } from \"react-toastify\";\n\n\nexport default ({ data }) => {\n    const [modalApply, setModalApply] = useState(false);\n    const matchRoute = useRouteMatch();\n    const { data: getProjects, error: errorProjects, mutate: mutateProjects } = useSWR(() => `v1/project/${matchRoute.params.projectId}`);\n    const loading = !getProjects && !errorProjects;\n    const project = useMemo(() => {\n        return getProjects?.data?.data ?? [];\n    }, [getProjects]);\n\n    const ValidationFormSchema = () => {\n        return Yup.object().shape({\n            cost: Yup.number().min(1, 'Min value 1.').label('Duration'),\n        })\n    }\n\n    const { values, touched, errors, setValues, handleSubmit } = useFormik({\n        initialValues: {\n            cost: 0,\n        },\n        validationSchema: ValidationFormSchema,\n        onSubmit: (values, { setSubmitting, setErrors }) => {\n            setSubmitting(true)\n\n            request.post(`v1/project/${matchRoute.params.projectId}/apply`, {\n                submittedCost: parseInt(values.cost),\n            })\n                .then(res => {\n                    toast.success('Project successfully applied.');\n                })\n                .catch(err => {\n                    toast.error('Apply project failed.');\n                })\n                .finally(() => {\n                    setModalApply(!modalApply)\n                    setSubmitting(false)\n                })\n        }\n    })\n\n    if (loading) {\n        return (\n            <div>loading</div>\n        )\n    }\n    return (\n        <Card>\n            <CardBody>\n                <Row>\n                    <Col xs=\"12\" className=\"d-flex justify-content-between mb-3\">\n                        <div>\n                            <div className=\"font-lg font-weight-bold\">{project.name}</div>\n                            <div className=\"text-muted\">{project.projectOwnerName}</div>\n                            <div><span className=\"text-muted\">Posted</span> {moment(project.createdAt).format('DD MMMM YYYY')}</div>\n                            <div><span className=\"text-muted\">Closing On</span> {moment(project.closingDate).format('DD MMMM YYYY')}</div>\n                        </div>\n                        <div>\n                            <div className=\"float-right\">\n                                {project.isApplied ?\n                                    <div className=\"font-lg font-weight-bold text-primary\">Applied</div>\n                                    :\n                                    <Button color=\"primary\" onClick={() => setModalApply(!modalApply)}>\n                                        Apply\n                                    </Button>\n                                }\n                            </div>\n                            <br />\n                            <div className=\"mt-5 font-sm font-weight-bold text-danger\">Closing in {moment(project.closingDate).fromNow(true)}</div>\n                        </div>\n                    </Col>\n                    <Col xs=\"4\">\n                        <div className=\"font-lg font-weight-bold\">\n                            Description\n                        </div>\n                        <div>\n                            {project.description}\n                        </div>\n                    </Col>\n                    <Col xs=\"8\">\n                        <div className=\"font-lg font-weight-bold\">\n                            Requirements\n                        </div>\n                        <Row>\n                            <Col xs=\"6\">\n                                <div className=\"mb-2\">\n                                    <div className=\"text-muted\">Completion Date</div>\n                                    <div>{moment(project.completeDate).format('DD MMMM YYYY')}</div>\n                                </div>\n                                <div className=\"mb-2\">\n                                    <div className=\"text-muted\">Sector</div>\n                                    <div>{project.sector}</div>\n                                </div>\n                                <div className=\"mb-2\">\n                                    <div className=\"text-muted\">Duration</div>\n                                    <div>{project.duration} Hours</div>\n                                </div>\n                                <div className=\"mb-2\">\n                                    <div className=\"text-muted\">Budget</div>\n                                    <div>IDR {project.budget}</div>\n                                </div>\n                            </Col>\n                            <Col xs=\"6\">\n                                <div className=\"mb-2\">\n                                    <div className=\"text-muted\">Skills</div>\n                                    {project.projectRequirementSkill.map((s, i) => (\n                                        <Badge key={i} color={skillsColours[i]} className=\"w-100 text-uppercase font-sm my-1 text-light\">{s.name}</Badge>\n                                    ))}\n                                </div>\n                                <div className=\"mb-2\">\n                                    <div className=\"text-muted\">Minimum years of experience</div>\n                                    <div>5 years</div>\n                                </div>\n                                <div className=\"mb-2\">\n                                    <div>Bachelor Degree in Mechanical Engineering</div>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n                <Modal isOpen={modalApply} centered toggle={() => setModalApply(!modalApply)}>\n                    <ModalBody className=\"p-5\">\n                        <Row>\n                            <Col xs=\"12\" className=\"mb-5\">\n                                <div className=\"mb-2\">\n                                    <div className=\"text-muted\">Sector</div>\n                                    <div>{project.sector}</div>\n                                </div>\n                                <div className=\"mb-2\">\n                                    <div className=\"text-muted\">Duration</div>\n                                    <div>{project.duration} Hours</div>\n                                </div>\n                                <div className=\"mb-2\">\n                                    <div className=\"text-muted\">Completion Date</div>\n                                    <div>{moment(project.completeDate).format('DD MMMM YYYY')}</div>\n                                </div>\n                                <div className=\"mb-2\">\n                                    <div className=\"text-muted\">Submited Cost</div>\n                                    <InputGroup>\n                                        <InputGroupAddon addonType=\"prepend\">\n                                            <InputGroupText>\n                                                IDR\n                                            </InputGroupText>\n                                        </InputGroupAddon>\n                                        <Input type=\"number\" name=\"cost\" id=\"cost\" value={values.cost} placeholder=\"1000000\" onChange={(e) => setValues(state => ({ ...state, cost: e.target.value }))} />\n                                    </InputGroup>\n                                    {touched.cost && errors.cost && <small className=\"text-danger\">{errors.cost}</small>}\n                                </div>\n                            </Col>\n                            <Col xs=\"12\" className=\"d-flex justify-content-end\">\n                                <Button color=\"secondary\" className=\"mr-2\" onClick={() => setModalApply(!modalApply)}>Cancel</Button>\n                                <Button color=\"primary\" onClick={handleSubmit}>Apply</Button>\n                            </Col>\n                        </Row>\n                    </ModalBody>\n                </Modal>\n            </CardBody>\n        </Card>\n    );\n}\n"],"sourceRoot":""}